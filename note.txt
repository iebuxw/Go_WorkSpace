main函数必须在main包，同一个文件夹下不能有多个main包


代码组织
    go的项目是由包来组织的
    go的每一个文件要属于一个包，不能单独存在

垃圾回收：引入垃圾回收机制，内存自动回收，不需要开发人员管理
天然的支持高并发

打印：
    1、输出并换行：fmt.Println
    2、Sprintf：格式化

报错相关
	报错：no required module provides package hello.go: go.mod file not found in current directory or any parent directory; see 'go help modules'
	解决：go env -w GO111MODULE=auto

注意事项
	当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，则为public，小写为protected
	注意： { 不能单独放在一行

	不需要分号

	var c int = 100
	// := 是声明并赋值，并且系统自动推断类型，不需要var关键字。:= 左侧的变量不应该是已经被声明过的，否则会导致编译错误
	d := 100

	指定变量类型，如果没有初始化，则变量默认为零值，而不是null

	Go 没有三目运算符

    声明了变量必须用，否则报错

    append(number2, 5): evaluated but not used       运算返回一个结果,但是没有赋给一个适当的变量

    go严格区分大小写

局部变量(函数内)：在函数体内声明的变量称之为局部变量
	//这种不带声明格式的(:=)只能在函数体中出现
	//g, h := 123, "hello"

全局变量(函数外)：在函数体外声明的变量称之为全局变量，全局变量可以在任何函数中使用
	var (  // 这种因式分解关键字的写法一般用于声明全局变量
		a int
		b bool
	)
	var c = 111

数据类型

特殊运算符
	&	返回变量存储地址
	*	指针变量。

变量赋值
	var a string = "Runoob" //指定类型
	var v_name = value //自行判断类型
	intVal := 1 相当于：var intVal int; intVal =1 //使用:=

常量
    可以放main外面定义，也可以在main或者其他函数里定义
	const LENGTH = 10

	const (
		Unknown = 0
		Female = 1
		Male = 2
	)

if条件
	if 布尔表达式 {
	   /* 在布尔表达式为 true 时执行 */
	}

switch（默认情况下 case 最后自带 break 语句，所以不需要手动加）
	switch marks {
      case 90:
		grade = "A"
      case 80:
		grade = "B"
      case 50,60,70 :
		grade = "C"
      default:
		grade = "D"
   }

for循环
	sum := 0
	for i := 0; i <= 10; i++ {
		sum += i
	}

函数
	如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型，下面 2 个声明是等价的：
	func f(i, j, k int, s, t string) { /* ... */ }
	func f(i int, j int, k int, s string, t string) { /* ... */ }

	//返回单个
	func max(num1, num2 int) int {
	   return num1 + num2
	}

	//返回多个，其他语言不支持
	func swap(x, y string) (string, string) {
	   return y, x
	}

字符串：
    字符串需要用双引号
    转义字符可以直接放双引号里
    字符串拼接用"+"
    单引号是 rune 类型，代表一个 UTF-8 字符，一般不用

数组：数组是具有相同唯一类型的一组已编号且长度固定的数据项序列。注意：1、类型要一样；2、长度固定
	var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}

数组函数（Go 数组的长度不可改变）：append

二维数组
a := [3][4]int{
 {0, 1, 2, 3} ,   /*  第一行索引为 0 */
 {4, 5, 6, 7} ,   /*  第二行索引为 1 */
 {8, 9, 10, 11},   /* 第三行索引为 2 */
}

指针
	声明
	var ip *int        /* 指向整型*/
	var fp *float32    /* 指向浮点型 */

	使用
	ip = &a  /* 指针变量的存储地址 */
    fmt.Printf("*ip 变量的值: %d\n", *ip )   /* 使用指针访问值 */

	空指针判断：
	if(ptr != nil)     /* ptr 不是空指针 */
    if(ptr == nil)    /* ptr 是空指针 */

    //指针作为函数参数
    func test(x *int)  {
    	*x = 20
    }

结构体:Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。1、固定数量；2、键不能数字；3、值类型可以不同
	定义
	type struct_variable_type struct {
	   member definition
	   member definition
	   ...
	   member definition
	}

	变量的声明
	variable_name := structure_variable_type {value1, value2...valuen}
	或
	variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen}

	访问：结构体.成员名

语言切片（动态数组，可以扩充）
	var slice1 []type = make([]type, len, capacity)
	slice1 := make([]type, len, capacity)

	例如： var numbers = make([]int,3,5)    //理解：len 是数组的长度并且也是切片的初始长度，容量是是最大的长度
		   numbers := []int{0,1,2,3,4,5,6,7,8}
	切片截取：
	number2 := numbers[1:3]  /*  1(包含) 到索引 3(不包含) */
	number3 := numbers[:3]  /*  0(包含) 到索引 3(不包含) */
	number4 := numbers[3:]  /*  3(包含) 到索引上限为 len(s) */
	fmt.Println("number4 == ", number4)  //[3 4 5 6 7 8]

语言范围


语言Map(hash map)
    Map 是一种无序的键值对的集合。1、键、值分别统一类型；2、键值对；3、无序；4、动态扩充

go没有继承概念

接口

并发

通道：goroutine之间的通信
     通道（channel）是用来传递数据的一个数据结构。
     管道的本质是队列，先进先出，最用是解决线程间通信
     要点:
        1、只能放指定数据类型
        2、放满了不能放


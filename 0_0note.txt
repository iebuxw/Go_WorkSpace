基础语法
    不需要分号

常用命令
    go env                                       // 查看配置
    go env GOROOT                                // 查看某个配置
    go env -w GO111MODULE=auto                   // 设置某个配置
    go version                                   // 看go版本号
    go build -o [xxx2.exe] xxx.go                   // 编译，注意需要是main包
        压缩，upx需要安装：
            go build -ldflags="-s -w" monitor.go
            "D:\Program Files\upx-4.0.1-win64\upx.exe" monitor
    go env -w GOOS=linux                          // 切换平台
        go env -w GOOS=windows

代码组织
    go的项目是由包来组织的
    go的每一个文件要属于一个包，不能单独存在
    main函数必须在main包，同一个文件夹下不能有多个main包

垃圾回收：引入垃圾回收机制，内存自动回收，不需要开发人员管理
并发：天然的支持高并发

打印：
    1、输出并换行：fmt.Println，打印多个会加空格
    2、Sprintf：格式化并返回变量
    2、Printf：格式化输出，不可以输出整形变量和整形
        %s和%d和php一样的
        %t：布尔值
        %q：如果是字符串会加引号，看得清楚
        %v      相应值的默认格式。            Printf("%v", people)   {zhangsan}，
        %+v     打印结构体时，会添加字段名     Printf("%+v", people)  {Name:zhangsan}
        %#v     相应值的Go语法表示            Printf("%#v", people)   main.Human{Name:"zhangsan"}
        %T      相应值的类型的Go语法表示       Printf("%T", people)   main.Human
        %%      字面上的百分号，并非值的占位符  Printf("%%")            %

报错相关
	报错：no required module provides package hello.go: go.mod file not found in current directory or any parent directory; see 'go help modules'
	解决：go env -w GO111MODULE=auto

	go root：
	1、重装go到d盘
	2、加版本号 http://t.zoukankan.com/smartisn-p-15737839.html
	3、选择go sdk然后重启ide

注意事项
	当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，则为public，小写为protected
	注意： { 不能单独放在一行

	不需要分号

	var c int = 100
	// := 是声明并赋值，并且系统自动推断类型，不需要var关键字。:= 左侧的变量不应该是已经被声明过的，否则会导致编译错误
	d := 100

	指定变量类型，如果没有初始化，则变量默认为零值，而不是null

	Go 没有三目运算符

    声明了变量必须用，否则报错

    append(number2, 5): evaluated but not used       运算返回一个结果,但是没有赋给一个适当的变量

    go严格区分大小写

    var的用法：var identifier type
    make的用法：make(type, length, capacity)//capacity就是容量，警戒值

    Golang语法简洁，点分符'.'的左边，既可以是实体对象，也可以是指针对象，底层优化了，为了书写方便

    没有++i，只有i++，并且需要单独写，不能a := i++

    17/5，结果是3，小数部分被舍弃了

    同一个包下有两个文件，两个文件不能有相同的函数名

    文件不能含有test，否则无法run

局部变量(函数内)：在函数体内声明的变量称之为局部变量
	//这种不带声明格式的(:=)只能在函数体中出现（也就是只能声明局部变量）
	//g, h := 123, "hello"

全局变量(函数外)：在函数体外声明的变量称之为全局变量，全局变量可以在任何函数中使用，不需要加global关键字
	var (  // 这种因式分解关键字的写法一般用于声明全局变量
		a int
		b bool
	)
	var c = 111

数据类型

特殊运算符
	&	返回变量存储地址
	*	指针变量。

声明变量
	var a string = "Runoob" //指定类型
	var v_name = value //自行判断类型
	intVal := 1 相当于：var intVal int; intVal =1 //使用:=

常量
    可以放main外面定义，也可以在main或者其他函数里定义
	const LENGTH = 10

	const (
		Unknown = 0
		Female = 1
		Male = 2
	)

if条件
	if 布尔表达式 {
	   /* 在布尔表达式为 true 时执行 */
	}

switch（默认情况下 case 最后自带 break 语句，所以不需要手动加）
	switch marks {
      case 90:
		grade = "A"
      case 80:
		grade = "B"
      case 50,60,70 :
		grade = "C"
      default:
		grade = "D"
   }

for循环
	sum := 0
	for i := 0; i <= 10; i++ {
		sum += i
	}

函数
	如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型，下面 2 个声明是等价的：
	func f(i, j, k int, s, t string) { /* ... */ }
	func f(i int, j int, k int, s string, t string) { /* ... */ }

	//返回单个
	func max(num1, num2 int) int {
	   return num1 + num2
	}

	//返回多个，其他语言不支持
	func swap(x, y string) (string, string) {
	   return y, x
	}

1.值类型:int系列、float系列、bool、string、数组和结构体
2.引用类型:指针、slice切片、map、管道chan、interface接口等   //引用类型如果用=，改变一个其他都改变

各int类型的取值范围为：
    int8: -128 ~ 127                                    (tinyint)
    int16: -32768 ~ 32767                               (smallint)
    int32: -2147483648 ~ 2147483647                     (int)
    int64: -9223372036854775808 ~ 9223372036854775807   (bigint)
    在 Go 语言中也实现了随着平台位数变化而变化的数据类型int。一般来说，这个类型在32位的系统中长度和int32一致，在64位的系统中长度和int64一致

字符串：
    字符串需要用双引号
    转义字符可以直接放双引号里
    字符串拼接用"+"
    单引号是 rune 类型，代表一个 UTF-8 字符，一般不用
        byte理解为字符，rune理解为字节。英文字符串理解为字符切片[]byte，中文字符串理解为字节切片[]rune，字符和字节本质上理解为int，也就是ASCII码

数组：数组是具有相同唯一类型的一组已编号且长度固定的数据项序列。注意：1、类型要一样；2、长度固定（类似索引数组？）
	var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}

数组函数（Go 数组的长度不可改变）

二维数组
a := [3][4]int{
 {0, 1, 2, 3} ,   /*  第一行索引为 0 */
 {4, 5, 6, 7} ,   /*  第二行索引为 1 */
 {8, 9, 10, 11},   /* 第三行索引为 2 */
}

指针
	声明
	var ip *int        /* 指向整型*/
	var fp *float32    /* 指向浮点型 */

	使用
	ip = &a  /* 指针变量的存储地址 */
    fmt.Printf("*ip 变量的值: %d\n", *ip )   /* 使用指针访问值 */

	空指针判断：
	if(ptr != nil)     /* ptr 不是空指针 */
    if(ptr == nil)    /* ptr 是空指针 */

    //指针作为函数参数
    func test(x *int)  {
    	*x = 20
    }

结构体:Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。1、固定数量；2、键不能数字；3、值类型可以不同(类似索引数组？)
	定义
	type struct_variable_type struct {
	   member definition
	   member definition
	   ...
	   member definition
	}

	变量的声明
	variable_name := structure_variable_type {value1, value2...valuen}
	或
	variable_name := structure_variable_type { key1: value1, key2: value2..., keyn: valuen}

	访问：结构体.成员名
	     结构体指针.成员名

语言切片（动态数组，可以扩充）
	var slice1 []type = make([]type, len, capacity)
	slice1 := make([]type, len, capacity)

	例如： var numbers = make([]int,3,5)    //理解：len 是数组的长度并且也是切片的初始长度，容量是是最大的长度
		   numbers := []int{0,1,2,3,4,5,6,7,8}
	切片截取：
	number2 := numbers[1:3]  /*  1(包含) 到索引 3(不包含) */
	number3 := numbers[:3]  /*  0(包含) 到索引 3(不包含) */
	number4 := numbers[3:]  /*  3(包含) 到索引上限为 len(s) */
	fmt.Println("number4 == ", number4)  //[3 4 5 6 7 8]

    坑：经扩容后的切片会复制到新的内存地址中。
        坑解释地址：https://www.jianshu.com/p/4045ea4795b5

语言Map(hash map)
    Map 是一种无序的键值对的集合。1、键、值分别统一类型；2、键值对；3、无序；4、动态扩充和删除

go没有继承概念

接口

并发

通道：goroutine之间的通信
     通道（channel）是用来传递数据的一个数据结构。
     管道的本质是队列，先进先出，最用是解决线程间通信
     要点:
        1、只能放指定数据类型
        2、放满了不能放
     锁：
        1、放满了没人取
        2、取时候是空的
        3、关闭的话读取是不会阻塞的

包的引入：
    1、方法名需要首字母大写，小写认为是private，引入不进来的
    2、貌似要放在$GO_PATH的src下，并且文件夹名、文件名、包名一致？// 包名通常跟文件名保持一致
    3、引入时候按路径引入即可

编译可执行文件：go build -o my.exe my.go
    1、编译必须是main包
    3、-o是换exe的路径、名称

go传参数启动服务
go run main.go -redis 192.168.99.233:6379


类型转换
    1、type(v)
    2、str := strconv.Itoa(12)
    3、go中的类型判断则是判断一个变量是否属于某一种类型
        var a interface{} = 10
         _,isInt := a.(int) // 进行类型的断言的变量必须是空接口

类型断言：在Go语言中类型断言的语法格式如下: value,ok:=x.(T) 1 其中,x 表示一个接口的类型,T 表示一个具体的类型(也可为接口类型)。

//初始化
    var a int32
    var a string
    var a [5]int
    var a []int
    var a map[string] int
    var a Struct3
    var a *int
    var a chan int
    var a func(string) int

defer
defer是go中一种延迟调用机制，defer后面的函数只有在当前函数执行完毕后才能执行，通常用于释放资源。总结：函数的return或者panic前执行的代码
defer遵循先进后出的原则，类似于栈的结构。

代码目录：D:\go_code\Go_WorkSpace\
GOROOT是指的Golang的安装目录
    查看：go env GOROOT
    D:\Go
GOPATH是指的Golang的工作目录
    查看：go env GOPATH
    D:\go_code
改成linux：go env -w GOOS=linux


代码的组织路径：

不同的项目可以设置不同的GO111MODULE，例如Go_WorkSpace项目使用的go path，gindemo使用的go mod

go mod的使用
	gopath是D:\go_code\，代码在D:\go_code\Go_WorkSpace，则在Go_WorkSpace目录下执行
	参考命令，也可以编辑器里操作：
        set GOROOT=D:\Program Files\Go              // go安装目录
        set GOPATH=D:\go_code                       // 第三方库
        set GO111MODULE=on                          // 开启go mod
        set GOPROXY=https://goproxy.io,direct       // 配置代理

	1、set GO111MODULE=on
	2、在项目下 go mod init Go_WorkSpace
	    或者 在main.go同级目录执行go mod init
	    如果报错：go: cannot determine module path for source directory D:\go_code\fsnotify (outside GOPATH, module path must be specified)
	    解决：加上项目路径就行
	3、直接写代码
	4、go mod download  //拉取所有模块
	   go mod tidy //拉取缺少的模块，移除不用的模块。

    新增某个依赖：go get <module-path>
    更新依赖到最新版本：go get -u <module-path>  // -u代表update
	另：执行 go build main.go 或者 执行go get命令，拉取依赖库
	    go mod tidy超时，则换代理：go env -w GOPROXY=https://goproxy.io,direct


go mod的禁用
	set GO111MODULE=off

go mode和go path会有冲突，用go path的时候需要禁用掉go mode，一般情况下，用go mod就好了

go path的使用
    1、set GO111MODULE=off
    2、在代码里import
    3、go get -t ... 代码里有提示，直接执行下就行
    4、go build main.go

go path的禁用
	set GO111MODULE=on
go mode和go path会有冲突，用go path的时候需要禁用掉go mode

数据类型转换：int64()直接转
    数字：
        1、无论是低精度到高精度都要强转
        2、高精度转到低精度，如果溢出不会报错，按溢出处理，取最大值
    字符串:
        1、用sprintf
        2、用strconv函数

协程：多进程
通道：协程间通信
select：类似switch，用来监听和通道有关的IO操作

php函数转go函数的链接：https://www.php2golang.com/
php与go对比：https://www.jianshu.com/p/44905bdeb505/

常用库：
go好用的库
encoding/json
net/http
os：提供了操作系统相关的函数，如文件处理、进程管理、环境变量等
io：提供了输入输出相关的函数，如读写文件、打开网络连接等。
flag：提供了命令行参数解析的功能
fsnotify 监控文件或目录改动的第三方库
log Go标准日志库
carbon 功能强大的日期时间库，仿 PHP 的同名库
email 发送邮件的第三方库
gron 定时任务管理库
cli 命令行程序库，方便编写命令行程序
cron 定时任务管理库，对标 Linux 的 crontab 命令

slice操作库
pie：pie包几乎把slice经常用到的功能都做了封装
    https://mp.weixin.qq.com/s/vdVZYEy5LznQSHI6klaCIg
golang-set：提供了对集合进行各种集合运算的支持，例如并集、交集、差集等
sort 包：在标准库中，提供了对切片进行排序的支持，可以使用该包中的函数来对切片进行升序或降序排序。
gods：提供了多种数据结构的实现，包括动态数组、链表、栈、队列等，其中动态数组就是基于 Go 的 slice 实现的
go-funk：提供了多种函数式编程的操作，特别是对于切片和集合的操作，如筛选、映射、过滤等

struct操作库
reflect 包：在标准库中，提供了对结构体进行反射的支持，可以使用该包中的函数来获取结构体的类型信息、字段信息、方法信息等。
structs 包：提供了一些基本的结构体操作，例如将结构体转化为 map 类型、比较两个结构体是否相等等。
go-structcopy/structcopy 包：提供了结构体之间复制的支持，可以快速地将一个结构体的值复制到另一个结构体中。
structil 包：提供了一些高级的结构体操作，如多个结构体的合并、自定义序列化和反序列化等。
validator 包：提供了对结构体字段的验证功能，可以校验数据的正确性，例如校验字符串是否符合邮箱格式、手机号格式等。
gorm 包：提供了对结构体与数据库表的映射支持，可以将结构体与数据库表进行关联，方便进行 CRUD 操作

map操作库
mapset 是一个高效且易于使用的 map 集合实现，使用红黑树来管理元素。它提供了许多常见的操作，例如并集、交集、差集等，同时还支持迭代器和回调函数。
mergo：merge structs and maps in Golang

中文库地址：https://studygolang.com/pkgdoc

好用的框架
gin
gorm
viper：一个配置解析库
go-redis：一个Redis客户端库，提供了丰富的Redis API

交叉编译：交叉编译是指在一个硬件平台生成另一个硬件平台的可执行文件。

gRPC：远程过程调用。类比http，但比http效率高，A服务调B服务的方法
反射：运行时动态获取变量的各种信息，如类型、值、方法。（编译时不知道）

升级go：
    1、卸载老的
    2、下载msi安装
    3、配置GOROOT：
        系统变量：GOROOT    D:\Go
    4、修改版本号：（原因是：IDEA / goland无法识别到GO语言SDK版本）
    打开GO的安装目录下的src\runtime\internal\sys\zversion.go文件，添加一行（我的go版本是1.18.2）

    const TheVersion = `go1.18.10`

    然后重启IDEA /goland
    这样再配置  goroot的时候就会自动识别到GO语言SDK版本了
